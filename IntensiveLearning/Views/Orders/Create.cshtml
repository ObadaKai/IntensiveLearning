@model IntensiveLearning.Database.Order

@{
    ViewBag.Title = "انشاء";
}
<div class="ThemeFirstBackground">
    <div class="WhiteBlur">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <div class="col-sm-6 col-xs-12" style="text-align:left;margin-top:20px;">

                <h4 ng-if="Quantity!=null && PeacePriceSyrian!=null">المجموع بالسوري: <b>{{Quantity * PeacePriceSyrian | currency:""}} ل.س</b></h4>
                <h4 ng-if="Quantity!=null && PeacePriceSyrian!=null && CommissionPrice!=null"><b>{{Quantity * PeacePrice | currency}}</b> :المجموع بالدولار</h4>
            </div>
            <div class="col-sm-6 col-xs-12">
                <h2>انشاء</h2>

                <h4 style="display:inline-block">طلب</h4>
            </div>

            <hr style="display:inline-block; width:100%;" />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ItemUnit, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.ItemUnit, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ItemUnit, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @ng_model = "Quantity", @type = "Number" } })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.PeacePriceSyrian, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.PeacePriceSyrian, new { htmlAttributes = new { @class = "form-control", @ng_model = "PeacePriceSyrian", @type = "Number" } })
                    @Html.ValidationMessageFor(model => model.PeacePriceSyrian, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CommissionPrice, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.CommissionPrice, new { htmlAttributes = new { @class = "form-control", @ng_model = "CommissionPrice", @type = "Number" } })
                    @Html.ValidationMessageFor(model => model.CommissionPrice, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.PeacePrice, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.PeacePrice, new { htmlAttributes = new { @class = "form-control", @ng_model = "PeacePrice = PeacePriceSyrian / CommissionPrice"} })
                    @Html.ValidationMessageFor(model => model.PeacePrice, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Necessity, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <select name="Necessity" id="Necessity" class="form-control">
                        <option value="1">خطيرة</option>
                        <option value="2">عالية جدا</option>
                        <option value="3">عالية</option>
                        <option value="4">متوسطة</option>
                        <option value="5">منخفضة</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.PeacePrice, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OrderType, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <select name="OrderManyTypes" id="OrderManyTypes" class="form-control">
                        <option>مشتريات</option>
                        <option>اخرى</option>
                    </select>
                    @Html.EditorFor(model => model.OrderType, new { htmlAttributes = new { @class = "form-control", @style = "display:none;" } })
                    @Html.ValidationMessageFor(model => model.OrderType, "", new { @class = "text-danger" })
                </div>
            </div>


            @if (ViewBag.type.SeeAccToCenter != true && ViewBag.type.SeeTeachers != true)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.CenterID, "المركز", htmlAttributes: new { @class = "control-label " })
            @Html.DropDownList("CenterID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CenterID, "", new { @class = "text-danger" })
        </div>
}

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
        }

        <div>
            @Html.ActionLink("العودة إلى اللائحة", "Index")
        </div>
    </div>
</div>